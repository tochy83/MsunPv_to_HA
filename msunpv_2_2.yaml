# Name : msunpv_2_2.yaml
# Intégration de récupération et configuration des sensors msunpv pour le routeur solaire MsunPv de Ard-tek
#
# Précision préalable, ce fichier est codé pour une version 2 entrées, 2 sorties du MsunPv avec PowPV en négatif et les compteurs EnConso, EnInj, EnPV_J, EnPV_P en négatifs également
# et sans pince de mesure sur les sorties 1 et 2. Tout cela est bien sur facilement adaptable si votre configuration est différente.
#
# Ne pas oublier de remplacer IP_DU_MSUNPV par l'adresse ip de votre MsunPv partout où c'est nécessaire dans le fichier.


### Récupération des données
rest:
  - resource: http://IP_DU_MSUNPV/status.xml
    scan_interval: 30 #Temps de récupération des données ici fixé à 30 secondes
    method: GET
    sensor:
      - name: "msunpv_xml"
        json_attributes_path: "$.xml"
        value_template: "OK"
        json_attributes:
          - "inAns"
          - "cmdPos"
          - "cptVals"

### Tous les sensors créés avec mise en forme des données
template:
  - sensor:
####### Les entrées
      - name: msunpv_powreso #Puissance réseau
        unique_id: "msunpv_powreso"
        icon: mdi:lightning-bolt
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[0] |float }}
        device_class: power
        unit_of_measurement: "W"

      - name: msunpv_powpv #Puissance panneaux
        unique_id: "msunpv_powpv"
        icon: mdi:solar-power
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[1] |float }}
        device_class: power
        unit_of_measurement: "W"

      - name: msunpv_outbal #% routage cumulus
        unique_id: "msunpv_outbal"
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[2] |int }}
        unit_of_measurement: "%"

      - name: msunpv_outrad #% routage radiateur
        unique_id: "msunpv_outrad"
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[3] |int }}
        unit_of_measurement: "%"

      - name: msunpv_voltres #Tension réseau
        unique_id: "msunpv_voltres"
        icon: mdi:sine-wave
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[4] |float }}
        unit_of_measurement: "V"

      - name: msunpv_t_bal1 #Température cumulus
        unique_id: "msunpv_t_bal1"
        icon: mdi:thermometer
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[5] |float }}
        unit_of_measurement: "°C"

      - name: msunpv_t_sdb #Température salle de bain
        unique_id: "msunpv_t_sdb"
        icon: mdi:thermometer
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[6] |float }}
        unit_of_measurement: "°C"

      - name: msunpv_t_amb #Température ambiante
        unique_id: "msunpv_t_amb"
        icon: mdi:thermometer
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'inAns')|replace(" ","")|replace(",",".")).split(";")[7] |float }}
        unit_of_measurement: "°C"

####### Les compteurs
      - name: msunpv_enconso #Consommation réseau journalière
        unique_id: "msunpv_enconso"
        icon: mdi:transmission-tower-export
        state: >-
          {% set cptVals =state_attr('sensor.msunpv_xml', 'cptVals')|replace(" ","") %}
          {{ cptVals.split(";")[0]|int(base=16)/10 |float }}
        unit_of_measurement: "Wh"
        device_class: energy

      - name: msunpv_eninj #Production injectée journalière
        unique_id: "msunpv_eninj"
        icon: mdi:transmission-tower-import
        state: >-
          {% set cptVals =state_attr('sensor.msunpv_xml', 'cptVals')|replace(" ","") %}
          {{ (0 if cptVals.split(";")[1]|int(base=16)|int == 0 else ((0xFFFFFFFF - cptVals.split(";")[1]|int(base=16)) * -1)/10) |float }}
        unit_of_measurement: "Wh"
        device_class: energy

      - name: msunpv_enpv_j #Production panneaux journalière
        unique_id: "msunpv_enpv_j"
        icon: mdi:solar-power-variant-outline
        state: >-
          {% set cptVals =state_attr('sensor.msunpv_xml', 'cptVals')|replace(" ","") %}
          {{ (0 if cptVals.split(";")[2]|int(base=16)|int == 0 else ((0xFFFFFFFF - cptVals.split(";")[2]|int(base=16)) * -1)/10) |float }}
        unit_of_measurement: "Wh"
        device_class: energy

      - name: msunpv_enpv_p #Production panneaux totale
        unique_id: "msunpv_enpv_p"
        icon: mdi:solar-power-variant-outline
        state: >-
          {% set cptVals =state_attr('sensor.msunpv_xml', 'cptVals')|replace(" ","") %}
          {{ (0 if cptVals.split(";")[3]|int(base=16)|int == 0 else ((0xFFFFFFFF - cptVals.split(";")[3]|int(base=16)) * -1)/10) |float }}
        unit_of_measurement: "Wh"
        device_class: energy

####### Sensors pour le dashboard energie. J'aurai très bien pu modifier directement les compteurs
####### mais j'ai fait le choix de créer de nouveaux sensors pour garder les compteurs tels qu'ils etaient à la base c'est à dire en négatif sur ma configuration.
      - name: "energie_msunpv_enconso" #Consommation journalière
        unique_id: "energie_msunpv_enconso"
        icon: mdi:counter
        state: "{{ (states('sensor.msunpv_enconso')|float /1000) }}"
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing

      - name: "energie_msunpv_enpv_j" #Production panneaux journalière
        unique_id: "energie_msunpv_enpv_j"
        icon: mdi:counter
        state: "{{ 0 if (states('sensor.msunpv_enpv_j')|float /1000) == 0 else (states('sensor.msunpv_enpv_j')|float /1000 *-1) }}"
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing

      - name: "energie_msunpv_eninj" #Production injectée journalière
        unique_id: "energie_msunpv_eninj"
        icon: mdi:counter
        state: "{{ 0 if (states('sensor.msunpv_eninj')|float /1000) == 0 else (states('sensor.msunpv_eninj')|float /1000 *-1) }}"
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing

####### L'état des commandes du MsunPv      
      - name: msunpv_cmdpos #L'état des commandes manu/auto/test routeur
        unique_id: "msunpv_cmdpos"
        state: >-
          {{ state_attr('sensor.msunpv_xml', 'cmdPos') }}

      - name: msunpv_cmd_s1 #Etat commande 1 et 2 - Sorties 1 et 2 du MsunPv
        unique_id: "msunpv_cmd_s1"
        state: >-
          {{ (state_attr('sensor.msunpv_xml', 'cmdPos')|replace("a","10")).split(";")[0] }}
          
      - name: msunpv_cmd_test # Etat commande 7 - Test routeur
        unique_id: "msunpv_cmd_test"
        state: >-
          {{ state_attr('sensor.msunpv_xml', 'cmdPos').split(";")[7] }}

### Choix des commandes à envoyer au MsunPv
input_select:
  msunpv_command_sortie_1: #Commande à envoyer à sortie 1 et 2
    name: Msunpv - Commande sortie 1 et 2
    options:
      - "0"
      - "1"
      - "2"
      - "4"
      - "5"
      - "6"
      - "8"
      - "9"
      - "10"
    icon: mdi:format-list-bulleted  

  msunpv_command_test_routeur: #Commande à envoyer à test routeur
    name: msunpv - Msunpv - Commande test routeur
    options:
      - "1"
      - "2"
      - "4"
      - "8"
    icon: mdi:format-list-bulleted

### Les commandes utilisables pour piloter le MsunPv
shell_command:
####### Toutes les commandes commentées ci-dessous sont les commandes utilisées sur la toute première version de cette intégration.
####### Si vous les utilisiez, vous pouvez toujours dé-commanter les lignes dont vous avez besoin.
#  msunpv_manubal_on: "curl -X POST -d 'parS=1;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_autobal_on: "curl -X POST -d 'parS=2;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_manurad_on: "curl -X POST -d 'parS=4;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_autorad_on: "curl -X POST -d 'parS=8;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_manubal_manurad_on: "curl -X POST -d 'parS=5;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_manubal_autorad_on: "curl -X POST -d 'parS=9;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_autobal_manurad_on: "curl -X POST -d 'parS=6;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_autobal_autorad_on: "curl -X POST -d 'parS=10;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_reset_commandes: "curl -X POST -d 'parS=0;0;0;0;0;0;0;2;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_arret_routage: "curl -X POST -d 'parS=0;0;0;0;0;0;0;1;' http://IP_DU_MSUNPV/index.xml"
#  msunpv_commandes: "curl -X POST -d 'parS={{ states('input_select.msunpv_command_sortie_1') }};0;0;0;0;0;0;{{ states('input_select.msunpv_command_test_routeur') }};' http://IP_DU_MSUNPV/index.xml"
  msunpv_commandes: "curl -X POST --data-urlencode 'parS={{ states('input_select.msunpv_command_sortie_1') }};0;0;0;0;0;0;{{ states('input_select.msunpv_command_test_routeur') }};' http://IP_DU_MSUNPV/index.xml"

